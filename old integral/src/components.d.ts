/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import '@stencil/core';

import '@ionic/core';
import 'ionicons';


export namespace Components {

  interface BreadcrumbMenu {
    'menu': string | MenuData[];
    'search': boolean;
    'wrapBreadcrumbs': boolean;
  }
  interface BreadcrumbMenuAttributes extends StencilHTMLAttributes {
    'menu'?: string | MenuData[];
    'onReady'?: (event: CustomEvent) => void;
    'onWhennavigate'?: (event: CustomEvent) => void;
    'onWhenopen'?: (event: CustomEvent) => void;
    'search'?: boolean;
    'wrapBreadcrumbs'?: boolean;
  }

  interface BreadcrumbTrail {
    'path': string;
    'wrap': boolean;
  }
  interface BreadcrumbTrailAttributes extends StencilHTMLAttributes {
    'onReady'?: (event: CustomEvent) => void;
    'onWhenclick'?: (event: CustomEvent) => void;
    'path'?: string;
    'wrap'?: boolean;
  }

  interface ChartLine {
    'getLine': (index: any) => Line;
    'getLines': () => Line[];
    'lines': string | Line[];
    'x': number;
    'xbars': number;
    'y': number;
    'ybars': number;
  }
  interface ChartLineAttributes extends StencilHTMLAttributes {
    'lines'?: string | Line[];
    'onChartmouseoleave'?: (event: CustomEvent) => void;
    'onChartmouseover'?: (event: CustomEvent) => void;
    'onLinecreated'?: (event: CustomEvent) => void;
    'onLinemouseenter'?: (event: CustomEvent) => void;
    'onLinemouseleave'?: (event: CustomEvent) => void;
    'onLinemouseover'?: (event: CustomEvent) => void;
    'onLineupdated'?: (event: CustomEvent) => void;
    'onReady'?: (event: CustomEvent) => void;
    'x'?: number;
    'xbars'?: number;
    'y'?: number;
    'ybars'?: number;
  }

  interface DocumentationElement {
    'json': string;
    'jsonUrl': string;
  }
  interface DocumentationElementAttributes extends StencilHTMLAttributes {
    'json'?: string;
    'jsonUrl'?: string;
    'onReady'?: (event: CustomEvent) => void;
  }

  interface DocumentationItem {
    'item': string;
  }
  interface DocumentationItemAttributes extends StencilHTMLAttributes {
    'item'?: string;
    'onReady'?: (event: CustomEvent) => void;
  }

  interface IconElement {
    'size': string;
    'type': string;
  }
  interface IconElementAttributes extends StencilHTMLAttributes {
    'size'?: string;
    'type'?: string;
  }

  interface ImageViewer {
    'alt': string;
    'cache': string;
    'fill': string;
    'height': undefined | string;
    'placeholder': string;
    'src': string;
    'width': undefined | string;
  }
  interface ImageViewerAttributes extends StencilHTMLAttributes {
    'alt'?: string;
    'cache'?: string;
    'fill'?: string;
    'height'?: undefined | string;
    'placeholder'?: string;
    'src'?: string;
    'width'?: undefined | string;
  }

  interface InputField {
    'autocomplete': string;
    'autofocus': boolean;
    'disabled': boolean;
    'errorMessage': string;
    'helpMessage': string;
    'iconUrl': string;
    'label': string;
    'labelPosition': any;
    'max': number | undefined;
    'min': number | undefined;
    'multiline': boolean;
    'name': string;
    'options': any[];
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'showClear': boolean;
    'showCount': boolean;
    'showIcon': any;
    'step': number | undefined;
    'tabindex': number;
    'type': string;
    'validator': Function | undefined;
    'value': any;
  }
  interface InputFieldAttributes extends StencilHTMLAttributes {
    'autocomplete'?: string;
    'autofocus'?: boolean;
    'disabled'?: boolean;
    'errorMessage'?: string;
    'helpMessage'?: string;
    'iconUrl'?: string;
    'label'?: string;
    'labelPosition'?: any;
    'max'?: number | undefined;
    'min'?: number | undefined;
    'multiline'?: boolean;
    'name'?: string;
    'onReady'?: (event: CustomEvent) => void;
    'options'?: any[];
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'showClear'?: boolean;
    'showCount'?: boolean;
    'showIcon'?: any;
    'step'?: number | undefined;
    'tabindex'?: number;
    'type'?: string;
    'validator'?: Function | undefined;
    'value'?: any;
  }

  interface ListElement {
    'isReady': () => Promise<boolean>;
    'items': ListItem[];
    'pop': () => Promise<any>;
    'push': (item: any) => Promise<any>;
    'ripple': string;
    'search': boolean | Function;
    'set': (items: ListItem[]) => void;
    'shift': () => Promise<any>;
    'splice': (index: any, item: any, count?: number) => Promise<any>;
    'underline': string;
    'unshift': (item: any) => Promise<any>;
  }
  interface ListElementAttributes extends StencilHTMLAttributes {
    'items'?: ListItem[];
    'onReady'?: (event: CustomEvent) => void;
    'onWhenclick'?: (event: CustomEvent) => void;
    'ripple'?: string;
    'search'?: boolean | Function;
    'underline'?: string;
  }

  interface PerformanceLogger {
    'timeout': number;
  }
  interface PerformanceLoggerAttributes extends StencilHTMLAttributes {
    'timeout'?: number;
  }

  interface RippleElement {
    'end': EventName;
    'opacity': number;
    'speed': number;
    'start': EventName;
    'targets': HTMLElement[];
  }
  interface RippleElementAttributes extends StencilHTMLAttributes {
    'end'?: EventName;
    'onReady'?: (event: CustomEvent) => void;
    'opacity'?: number;
    'speed'?: number;
    'start'?: EventName;
    'targets'?: HTMLElement[];
  }

  interface ToolTip {
    'background': string;
    'close': () => void;
    'color': string;
    'delay': number;
    'hideAfter': number;
    'isActive': boolean;
    'justify': string;
    'offset': number;
    'open': () => void;
    'pad': number;
    'position': string;
    'showBoxShadow': boolean;
    'size': string;
    'triggerElement': HTMLElement | string;
    'triggerOn': string;
    'updateInnerHTML': (html: string) => void;
    'width': string;
  }
  interface ToolTipAttributes extends StencilHTMLAttributes {
    'background'?: string;
    'color'?: string;
    'delay'?: number;
    'hideAfter'?: number;
    'isActive'?: boolean;
    'justify'?: string;
    'offset'?: number;
    'onWhenClosed'?: (event: CustomEvent) => void;
    'onWhenOpened'?: (event: CustomEvent) => void;
    'pad'?: number;
    'position'?: string;
    'showBoxShadow'?: boolean;
    'size'?: string;
    'triggerElement'?: HTMLElement | string;
    'triggerOn'?: string;
    'width'?: string;
  }

  interface UnderlineElement {
    'color': EventName;
    'direction': EventName;
    'end': EventName;
    'opacity': number;
    'speed': number;
    'start': EventName;
    'targets': HTMLElement[];
  }
  interface UnderlineElementAttributes extends StencilHTMLAttributes {
    'color'?: EventName;
    'direction'?: EventName;
    'end'?: EventName;
    'onReady'?: (event: CustomEvent) => void;
    'opacity'?: number;
    'speed'?: number;
    'start'?: EventName;
    'targets'?: HTMLElement[];
  }
}

declare global {
  interface StencilElementInterfaces {
    'BreadcrumbMenu': Components.BreadcrumbMenu;
    'BreadcrumbTrail': Components.BreadcrumbTrail;
    'ChartLine': Components.ChartLine;
    'DocumentationElement': Components.DocumentationElement;
    'DocumentationItem': Components.DocumentationItem;
    'IconElement': Components.IconElement;
    'ImageViewer': Components.ImageViewer;
    'InputField': Components.InputField;
    'ListElement': Components.ListElement;
    'PerformanceLogger': Components.PerformanceLogger;
    'RippleElement': Components.RippleElement;
    'ToolTip': Components.ToolTip;
    'UnderlineElement': Components.UnderlineElement;
  }

  interface StencilIntrinsicElements {
    'breadcrumb-menu': Components.BreadcrumbMenuAttributes;
    'breadcrumb-trail': Components.BreadcrumbTrailAttributes;
    'chart-line': Components.ChartLineAttributes;
    'documentation-element': Components.DocumentationElementAttributes;
    'documentation-item': Components.DocumentationItemAttributes;
    'icon-element': Components.IconElementAttributes;
    'image-viewer': Components.ImageViewerAttributes;
    'input-field': Components.InputFieldAttributes;
    'list-element': Components.ListElementAttributes;
    'performance-logger': Components.PerformanceLoggerAttributes;
    'ripple-element': Components.RippleElementAttributes;
    'tool-tip': Components.ToolTipAttributes;
    'underline-element': Components.UnderlineElementAttributes;
  }


  interface HTMLBreadcrumbMenuElement extends Components.BreadcrumbMenu, HTMLStencilElement {}
  var HTMLBreadcrumbMenuElement: {
    prototype: HTMLBreadcrumbMenuElement;
    new (): HTMLBreadcrumbMenuElement;
  };

  interface HTMLBreadcrumbTrailElement extends Components.BreadcrumbTrail, HTMLStencilElement {}
  var HTMLBreadcrumbTrailElement: {
    prototype: HTMLBreadcrumbTrailElement;
    new (): HTMLBreadcrumbTrailElement;
  };

  interface HTMLChartLineElement extends Components.ChartLine, HTMLStencilElement {}
  var HTMLChartLineElement: {
    prototype: HTMLChartLineElement;
    new (): HTMLChartLineElement;
  };

  interface HTMLDocumentationElementElement extends Components.DocumentationElement, HTMLStencilElement {}
  var HTMLDocumentationElementElement: {
    prototype: HTMLDocumentationElementElement;
    new (): HTMLDocumentationElementElement;
  };

  interface HTMLDocumentationItemElement extends Components.DocumentationItem, HTMLStencilElement {}
  var HTMLDocumentationItemElement: {
    prototype: HTMLDocumentationItemElement;
    new (): HTMLDocumentationItemElement;
  };

  interface HTMLIconElementElement extends Components.IconElement, HTMLStencilElement {}
  var HTMLIconElementElement: {
    prototype: HTMLIconElementElement;
    new (): HTMLIconElementElement;
  };

  interface HTMLImageViewerElement extends Components.ImageViewer, HTMLStencilElement {}
  var HTMLImageViewerElement: {
    prototype: HTMLImageViewerElement;
    new (): HTMLImageViewerElement;
  };

  interface HTMLInputFieldElement extends Components.InputField, HTMLStencilElement {}
  var HTMLInputFieldElement: {
    prototype: HTMLInputFieldElement;
    new (): HTMLInputFieldElement;
  };

  interface HTMLListElementElement extends Components.ListElement, HTMLStencilElement {}
  var HTMLListElementElement: {
    prototype: HTMLListElementElement;
    new (): HTMLListElementElement;
  };

  interface HTMLPerformanceLoggerElement extends Components.PerformanceLogger, HTMLStencilElement {}
  var HTMLPerformanceLoggerElement: {
    prototype: HTMLPerformanceLoggerElement;
    new (): HTMLPerformanceLoggerElement;
  };

  interface HTMLRippleElementElement extends Components.RippleElement, HTMLStencilElement {}
  var HTMLRippleElementElement: {
    prototype: HTMLRippleElementElement;
    new (): HTMLRippleElementElement;
  };

  interface HTMLToolTipElement extends Components.ToolTip, HTMLStencilElement {}
  var HTMLToolTipElement: {
    prototype: HTMLToolTipElement;
    new (): HTMLToolTipElement;
  };

  interface HTMLUnderlineElementElement extends Components.UnderlineElement, HTMLStencilElement {}
  var HTMLUnderlineElementElement: {
    prototype: HTMLUnderlineElementElement;
    new (): HTMLUnderlineElementElement;
  };

  interface HTMLElementTagNameMap {
    'breadcrumb-menu': HTMLBreadcrumbMenuElement
    'breadcrumb-trail': HTMLBreadcrumbTrailElement
    'chart-line': HTMLChartLineElement
    'documentation-element': HTMLDocumentationElementElement
    'documentation-item': HTMLDocumentationItemElement
    'icon-element': HTMLIconElementElement
    'image-viewer': HTMLImageViewerElement
    'input-field': HTMLInputFieldElement
    'list-element': HTMLListElementElement
    'performance-logger': HTMLPerformanceLoggerElement
    'ripple-element': HTMLRippleElementElement
    'tool-tip': HTMLToolTipElement
    'underline-element': HTMLUnderlineElementElement
  }

  interface ElementTagNameMap {
    'breadcrumb-menu': HTMLBreadcrumbMenuElement;
    'breadcrumb-trail': HTMLBreadcrumbTrailElement;
    'chart-line': HTMLChartLineElement;
    'documentation-element': HTMLDocumentationElementElement;
    'documentation-item': HTMLDocumentationItemElement;
    'icon-element': HTMLIconElementElement;
    'image-viewer': HTMLImageViewerElement;
    'input-field': HTMLInputFieldElement;
    'list-element': HTMLListElementElement;
    'performance-logger': HTMLPerformanceLoggerElement;
    'ripple-element': HTMLRippleElementElement;
    'tool-tip': HTMLToolTipElement;
    'underline-element': HTMLUnderlineElementElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
